#!/usr/bin/env python3.3

# PUBLIC DOMAIN
# http://github.com/jkeogh/dnsmasq-blacklist

# todo:
# optional read hosts file from stdin

import time
import sys
import os
import requests
import argparse
import tldextract
no_cache_extract = tldextract.TLDExtract(cache_file=False)


# http://stackoverflow.com/questions/3853722/python-argparse-how-to-insert-newline-in-the-help-text
class SmartFormatter(argparse.HelpFormatter):
	def _split_lines(self, text, width):
		# this is the RawTextHelpFormatter._split_lines
		if text.startswith('R|'):
			return text[2:].splitlines()  
		return argparse.HelpFormatter._split_lines(self, text, width)

parser = argparse.ArgumentParser(formatter_class=SmartFormatter)

parser.add_argument("output_file", help='file to write dnsmasq rules to')
parser.add_argument("--no-subdomains",
			help='''R|do not include subdomains:\nexample:\n\tanalytics.google.com will block google.com and all subdomains (see --whitelist)''',
			action="store_true", default=False)

parser.add_argument("--hosts",
			help='''R|generate /etc/hosts compatiable file (mutually exclusive with --no-subdomains since hosts files can't block wildcard subdomains)''',
			action="store_true", default=False)

parser.add_argument("--whitelist",
			help='''R|whitelist of dns names\nExample:\n\tstackexchange.com\n\tstackoverflow.com''',
			type=str, default=False)

args = parser.parse_args()

if os.path.isfile(args.output_file):
	print("File %s exists. Refusing to overwrite. Exiting." % args.output_file)
	quit(1)

#http://stackoverflow.com/questions/1549509/remove-duplicates-in-a-list-while-keeping-its-order-python
def unique(seq):
	seen = set()
	for item in seq:
		if item not in seen:
			seen.add(item)
			yield item

def domain_extract(domain):
	dom = no_cache_extract(domain)
	return dom

def get_hosts_list(hosts_file_url):
	user_agent = 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:24.0) Gecko/20100101 Firefox/24.0'
	hosts_file_lines = []

	raw_hosts_file_lines = requests.get(hosts_file_url, headers={'User-Agent': user_agent},
					allow_redirects=True, stream=True, timeout=15.500).content.split(b'\n')

	for line in raw_hosts_file_lines:
		line = line.decode('UTF-8')
		line = line.replace('\t', ' ')
		line = " ".join(line.split())		# collapse whitespace
		line = line.strip()
		if len(line) == 0:					# skip empty lines
			continue

		if not line.startswith('#'):		# remove comments
			line = line.split(' ')[1]		# get dns name
			if args.no_subdomains:
				line = domain_extract(line)		# get tld
				line = line.domain + '.' + line.suffix

			hosts_file_lines.append(line)

	hosts_file_lines = set(hosts_file_lines)
	return hosts_file_lines

def convert_hosts_file_to_dnsmasq_format(hosts_file_lines):
	dnsmasq_rules = []
	for item in hosts_file_lines:
		dnsmasq_line = 'address=/.' + item + '/127.0.0.1'
		dnsmasq_rules.append(dnsmasq_line)
	dnsmasq_rules = set(dnsmasq_rules)
	return dnsmasq_rules


if __name__ == '__main__':

	result_set = set()
	output_file = os.path.abspath(args.output_file)
	if args.whitelist:
		whitelist_file = os.path.abspath(args.whitelist)
		if os.path.isfile(whitelist_file):
			with open(whitelist_file, 'r') as wl_fh:
				whitelist = set(wl_fh.read().splitlines())
		else:
			raise FileNotFoundError("file:" + whitelist_file + " does not exist.")
			
	data_sources = ['http://winhelp2002.mvps.org/hosts.txt', 
					'http://someonewhocares.org/hosts/hosts']

	for url in data_sources:
		hosts_rules = get_hosts_list(url)
		if args.whitelist:
			hosts_rules = hosts_rules - whitelist

		if args.hosts:
			result_set = result_set|hosts_rules		#union
		else:
			dnsmasq_rules = convert_hosts_file_to_dnsmasq_format(hosts_rules)
			result_set = result_set|dnsmasq_rules

	if args.hosts:
		with open(args.output_file, 'w') as fh:
			for item in result_set:
				fh.write('127.0.0.1 ' + item + '\n')
	else:
		with open(args.output_file, 'w') as fh:
			for item in result_set:
				fh.write(item + '\n')

	print("Done generating", output_file, file=sys.stderr)

	if args.hosts:
		print("\nTo add to /etc/hosts:", file=sys.stderr)
		print('cp -vi /etc/hosts /etc/hosts.' + str(time.time()) +
		' && cat ' + output_file + '" >> /etc/hosts', file=sys.stderr)

	else:
		print("\nTo add to /etc/dnsmasq.conf:", file=sys.stderr)
		print('cp -vi /etc/dnsmasq.conf /etc/dnsmasq.conf.' + str(time.time()) +
		' && echo \"conf-file=' + output_file + '" >> /etc/dnsmasq.conf', file=sys.stderr)
		print('\nThen restart the dnsmasq service:', file=sys.stderr)
		print('\"/etc/init.d/dnsmasq restart\" or \"service dnsmasq restart\"', file=sys.stderr)
