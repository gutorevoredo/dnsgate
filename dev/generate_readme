#!/usr/bin/env python

import os
import subprocess

code_sep='```'

preamble='''
# dnsgate

**dnsgate** merges 3rd party [1] DNS blocking lists into `/etc/dnsmasq.conf` or `/etc/hosts` format.

While not required, [dnsmasq](https://wiki.gentoo.org/wiki/Dnsmasq) improves on conventional [/etc/hosts domain blocking](http://winhelp2002.mvps.org/hosts.htm) by enabling * blocking of domains.

For example *.google.com:

```
echo 'address=/.google.com/127.0.0.1' >> /etc/dnsmasq.conf
```
Has the effect of returning 127.0.0.1 for all google.com domains. Rather than return 127.0.0.1, dnsmasq can return NXDOMAIN:

```
echo 'server=/.google.com/' >> /etc/dnsmasq.conf
```
This instead returns NXDOMAIN on *.google.com. Returning NXDOMAIN is dnsgate's default behavior in dnsmasq mode.

Said another way, conventional `/etc/hosts` blocking can't use wildcards (*) and therefore requires the user to keep track of each subdomain / domain combination they want to block. This is not necessarily a problem. Even if you don't use dnsmasq, other people [1] keep track of the subdomains for you. If you want to block a specific domain completely, use dnsmasq.

With `--mode dnsmasq` (default if not specified) the `--block-at-tld` option strips domains to their TLD, removing the need to manually specify/track specific subdomains. `--block-at-tld` may block TLD's you want to use, so use it with `--whitelist`.

**Features:**
* **Wildcard Blocking** --block-at-tld will block TLD's instead of individual subdomains (dnsmasq mode only).
* **System-wide.** All programs that use the local DNS resolver benefit.
* **Non-interactive.** Can be run as a periodic cron job.
* **Fully Configurable.** See ./dnsgate --help (TODO, add /etc/dnsgate/config file support)
* **Custom Lists.** See /etc/dnsgate/blacklist and /etc/dnsgate/whitelist.
* **Return NXDOMAIN.** Rather than redirect the request to 127.0.0.1, NXDOMAIN is returned. (dnsmasq mode only).
* **Return Custom IP.** --dest-ip allows redirection to specified IP (disables returning NXDOMAIN in dnsmasq mode)
* **Installation Support.** see --install-help
* **Extensive Debugging Support.** see --verbose and --debug
* **IDN Support.** What to block snowman? ./dnsgate --blacklist-append xn--n3h.net

**Features TODO:**
* **Downloaded Caching.** Optionally cache and re-use downloaded blacklists instead of re-fetching each time (configurable timeout, see --cache-timeout) (partially done).
* **Full Test Coverage.**
* **Fully-interactive.** Can be run as an interactive wizard. See --interactive (TODO).

**Dependencies:**
 - [dnsmasq](http://www.thekelleys.org.uk/dnsmasq/doc.html) (optional)
 - python3 (tested on 3.4)
 - [click](https://github.com/mitsuhiko/click)
 - [tldextract](https://github.com/john-kurkowski/tldextract)
 - [colorama](https://github.com/tartley/colorama)
'''

post='''


**More Information:**
 - https://news.ycombinator.com/item?id=10572700
 - https://news.ycombinator.com/item?id=10369516

**Related Software:**
 - https://github.com/gaenserich/hostsblock (bash)
 - http://pgl.yoyo.org/as/#unbound
 - https://github.com/longsleep/adblockrouter
 - https://github.com/StevenBlack/hosts (TODO, use this)

**Simple Software:**
If you find this useful you may appreciate:

 - Disabling JS and making a keybinding to enable it ([surf](http://surf.suckless.org/)+[tabbed](http://tools.suckless.org/tabbed/) makes this easy)
 - [musl](http://wiki.musl-libc.org/wiki/Functional_differences_from_glibc#Name_Resolver_.2F_DNS)

[1]: http://winhelp2002.mvps.org/hosts.txt http://someonewhocares.org/hosts/hosts

'''

def run_command(command_list, show=False):
    command = b'\n$ ' + b' '.join(command_list)
    if command.startswith(b'\n$ ..'):
        command = command.replace(b'\n$ ..', b'\n$ .')
        command = command.replace(b'dnsgate.py', b'dnsgate')
    command = command.decode('UTF8')
    if show:
        print(' ', command)

    p = subprocess.Popen(command_list, stderr=subprocess.STDOUT)
    p_output = p.communicate()
    return


if __name__ == '__main__':
    dnsgate_help = [b'../dnsgate.py', b'--help']
    dnsmasq_example = [b'../dnsgate.py']
    dnsmasq_example_install_help = [b'../dnsgate.py', b'--install-help']
    dnsmasq_example_show_config = [b'../dnsgate.py', b'--show-config']
    dnsmasq_example_verbose = [b'../dnsgate.py', b'--verbose']
    dnsmasq_example_verbose_block_at_tld = [b'../dnsgate.py', b'--verbose', b'--block-at-tld']

    hosts_example = [b'../dnsgate.py', b'--mode', b'hosts']
    hosts_example_install_help = [b'../dnsgate.py', b'--mode', b'hosts', b'--install-help']
    hosts_example_show_config = [b'../dnsgate.py', b'--mode', b'hosts', b'--show-config']
    hosts_example_verbose = [b'../dnsgate.py', b'--mode', b'hosts', b'--verbose']

    print(preamble)
    print(code_sep)
    run_command(dnsgate_help)
    print(code_sep)

    print(' ')
    print("**three dnsmasq examples that do the same thing:**")
    print(' ')
    print(code_sep, end='')
    run_command(dnsmasq_example, show=True)
    run_command(dnsmasq_example_show_config, show=True)
    run_command(dnsmasq_example_verbose, show=True)
    print(code_sep, end='')

    print(' ')
    print("**dnsmasq example with --block-at-tld:**")
    print(' ')
    print(code_sep, end='')
    run_command(dnsmasq_example_verbose_block_at_tld, show=True)
    print(code_sep, end='')

    print(' ')
    print("**dnsmasq install help:**")
    print(' ')
    print(code_sep, end='')
    run_command(dnsmasq_example_install_help, show=True)
    print(code_sep, end='')

    print(' ')
    print("**three hosts examples that do the same thing:**")
    print(' ')
    print(code_sep, end='')
    run_command(hosts_example, show=True)
    run_command(hosts_example_show_config, show=True)
    run_command(hosts_example_verbose, show=True)
    print(code_sep, end='')

    print(' ')
    print("**/etc/hosts install help:**")
    print(' ')
    print(code_sep, end='')
    run_command(hosts_example_install_help, show=True)
    print(code_sep, end='')


    print(' ')
    print(post)


later = '''
# Installation

If you don't use `pipsi`, you're missing out.
Here are [installation instructions](https://github.com/mitsuhiko/pipsi#readme).

Simply run:

    $ pipsi install .

'''
